scrum-board/
├── Makefile
├── README.md
├── include/
│   ├── scrum_board.h
│   ├── task.h
│   ├── column.h
│   ├── board.h
│   └── ftxui_helpers.h
├── src/
│   ├── main.cpp
│   ├── scrum_board.cpp
│   ├── task.cpp
│   ├── column.cpp
│   ├── board.cpp
│   └── ftxui_helpers.cpp
├── lib/
│   └── (здесь будут библиотеки FTXUI, если собираем из исходников)
└── build/
    └── (здесь будут объектные файлы и исполняемый файл)

Декомпозиция задачи на подзадачи
1. Подготовка окружения и базовой структуры

----------Задача 1.1: Настройка системы сборки

    Создать Makefile с правилами компиляции

    Настроить флаги компиляции для C++17

    Добавить поддержку библиотеки FTXUI

    Реализовать правила all, clean, install-deps
------------

Задача 1.2: Базовая структура данных - Задача (Task)
cpp

class Task {
    std::string id;
    std::string title;
    std::string description;
    std::string assignee;
    int priority; // 1-5
    int story_points;
    std::string status; // "To Do", "In Progress", "Done"
    // методы: конструкторы, геттеры, сеттеры
};

Задача 1.3: Столбец доски (Column)
cpp

class Column {
    std::string name;
    int wip_limit; // ограничение Work In Progress
    std::vector<Task> tasks;
    // методы: добавление/удаление задач, проверка WIP лимита
};

Задача 1.4: Доска (Board)
cpp

class Board {
    std::string name;
    std::vector<Column> columns;
    // методы: управление колонками, поиск задач, сериализация
};

2. Реализация бизнес-логики

Задача 2.1: Управление задачами

    Создание новой задачи с автоматической генерацией ID

    Редактирование полей задачи

    Перемещение задачи между колонками

    Удаление задач

    Поиск задач по различным критериям

Задача 2.2: Управление колонками

    Добавление/удаление колонок

    Проверка WIP лимитов

    Валидация операций перемещения

Задача 2.3: Сериализация данных

    Сохранение доски в JSON файл

    Загрузка доски из JSON файл

    Обработка ошибок ввода/вывода

3. Реализация пользовательского интерфейса с FTXUI

Задача 3.1: Базовые компоненты интерфейса

    Создание главного окна с layout

    Реализация навигационного меню

    Создание компонентов для отображения статуса

Задача 3.2: Отображение доски

    Визуализация колонок как горизонтальные контейнеры

    Отображение задач внутри колонок

    Цветовое кодирование приоритетов

    Показ WIP лимитов

Задача 3.3: Модальные окна

    Окно создания/редактирования задачи

    Окно настройки колонок

    Диалоги подтверждения удаления

Задача 3.4: Формы ввода

    Форма для ввода данных задачи

    Валидация вводимых данных

    Выпадающие списки для статусов и приоритетов

4. Функциональность приложения

Задача 4.1: Основные операции

    Просмотр доски

    Добавление новой задачи

    Перемещение задач между колонками (drag & drop или через меню)

    Редактирование существующих задач

Задача 4.2: Дополнительные функции

    Поиск задач

    Фильтрация по исполнителю

    Статистика по доске

    Экспорт данных

Задача 4.3: Обработка состояний

    Загрузка начального состояния

    Автосохранение

    Восстановление после ошибок